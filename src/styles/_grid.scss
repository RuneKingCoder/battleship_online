@mixin make-square-box {
  position: relative;

  &::before {
    content: "";
    display: block;
    padding-top: 100%;
  }

  > div {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }
}

.grid-wrapper {
  width: 100%;

  /* width for breakpoint sm is handled in bootstrap via class of
     .grids-container in html (col-sm-*)
  */

  @include media-breakpoint-up(md) {
    width: 45%;
  }
  @include media-breakpoint-up(lg) {
    width: 40%;
  }
  @include media-breakpoint-up(xl) {
    width: 28%;
  }

  p {
    display: block;
    text-align: center;

    // non-mobile first here, so js manipulation is hindered only on mobile
    @include media-breakpoint-down(sm) {
      display: none !important;
    }
  }

  &#player-side {
    /* when opposite grid is revealed, player grid is moved on top, but only
       on small screens */
    &.dual-view {
      position: absolute;
      top: 0;
      left: 0;

      @include media-breakpoint-up(md) {
        position: relative;
      }
    }
  }

  &#opponent-side {
    display: none;

    /* when opposite grid is revealed, it takes up space that player grid
       left because its position was set to absolute on small screens */
    &.dual-view {
      display: block;
    }
  }

  .game-grid {
    @include make-square-box;

    table {
      position: relative;
      width: 100%;
      height: 100%;
      border-collapse: separate;
      border-spacing: 1px;
      background-color: map-get($colors, table-border);
      table-layout: fixed;

      @include media-breakpoint-up(sm) {
        outline: 1px solid map-get($colors, table-border);
      }
    }

    table td {
      background-color: map-get($colors, table-cell);
      position: relative;

      & .fa {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: default;

        &.fa-times {
          color: map-get($colors, shot-hit);
          font-size: 1.5em;

          @include media-breakpoint-up(sm) {
            font-size: 2.5em;
          }
        }
        &.fa-bullseye {
          color: map-get($colors, shot-miss);
          font-size: 1.3em;

          @include media-breakpoint-up(sm) {
            font-size: 1.5em;
          }
        }
      }
    }

    .ship {
      // outline: 1px solid grey;
      background-color: map-get($colors, ship);
    }

    .overlap {
      background-color: map-get($colors, ship-overlap);
    }

    .forbidden {
      background-color: map-get($colors, ship-forbidden);
    }

    .highlighted {
      box-shadow: 0 0 0.5em 0.5em map-get($colors, ship-highlight-shadow) inset;
    }

    .draggable {
      // border: 1px solid black;
      cursor: grab;
    }
    /* set cursor on both dragged element and parent to keep it
    consistent when dragging */
    &.dragging, .dragging {
      cursor: grabbing;
    }
  }
}
